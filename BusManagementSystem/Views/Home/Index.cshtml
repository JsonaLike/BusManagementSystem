@using BusManagementSystem.Models;
@model IEnumerable<Trip>

 
<div class="ism-slider " data-radios="false" id="my-slider" >
    <div class="ism-frame">
        <ol class="ism-slides"
            style="
            width: 300%;
            perspective: 1000px;
            backface-visibility: hidden;
            transform: translateX(0px);
          ">
            <li class="ism-slide ism-slide-0" style="width: 33.3333%; left: 0%;">
                <div class="ism-img-frame">
                    <img src="~/ism/image/slides/london_bus.png" class="ism-img" />
                </div>
            </li>
            <li class="ism-slide ism-slide-1"
                style="width: 33.3333%; left: 33.3333%;">
                <div class="ism-img-frame">
                    <img src="~/ism/image/slides/two.jpeg"
                         class="ism-img" />
                </div>
            </li>
            <li class="ism-slide ism-slide-2"
                style="width: 33.3333%; left: 66.6667%;">
                <div class="ism-img-frame">
                    <img src="~/ism/image/slides/one.jpeg"
                         class="ism-img" />
                </div>
            </li>
        </ol>
        <div class="ism-button ism-button-prev">&nbsp;</div>
        <div class="ism-button ism-button-next">&nbsp;</div>
    </div>
</div>


 <form autocomplete="off" action="~/Search/" method="get">
<div class="text-center cd">
    <div class="cardContainer" id="cardContainer">
           
        <h1 id="search-for-trip">Search For Trip</h1>
            <div id="cardContainerIn">
        <div id="FromTo">
        <h4 class="fontWhite FromTo From" id="From">From</h4>

        <!--Make sure the form has the autocomplete function switched off:-->
        <div autocomplete="off" action="/action_page.php">
            <div class="autocomplete">
                <input id="myInput" autocomplete="new-password" type="text" name="departureCity" placeholder="Riyadh" />
            </div>
            <!--<input type="submit" />-->
        </div>
        <h4 class="fontWhite FromTo" id="To">To</h4>
        <div autocomplete="off" action="/action_page.php">
            <div class="autocomplete">
                <input id="myInput2"
                       type="text"
                       autocomplete="new-password"
                       name="arrivalCity"
                       placeholder="Makkah" />
            </div>
                    </div>
        </div>
        </div>
        </br>
        <input type="submit" class="px-5 py-2" id="input-submit" />
        </div>
</div>
</form>
<script>
    $(document).ready(function () {
            // Your callback function here
            // ...

            $(".parent").show();
        const departureSelect = document.getElementById("myInput");
        const arrivalSelect = document.getElementById("myInput2");

        // Add event listeners to the select elements
        departureSelect.addEventListener("change", function () {
            updateSelects(departureSelect, arrivalSelect);
        });
        arrivalSelect.addEventListener("change", function () {
            updateSelects(arrivalSelect, departureSelect);
        });
        var slides = $(".slideshow img");
        /*alignElements("#test", "#myInput", "#From");

        $(window).resize(function () {
            alignElements("#test", "#myInput", "#From");
        });

        alignElements("#test", "#myInput2", "#To");

        $(window).resize(function () {
            alignElements("#test", "#myInput2", "#To");
        });
        function alignElements(referenceEl, el1, el2) {
            var referenceLeft = $(referenceEl).offset().left;
            var el1Left = $(el1).offset().left;
            var offset = el1Left - referenceLeft;
            $(el2).css("margin-left", offset + "px");
        }*/



        function autocomplete(inp, arr ,otherInput) {
            console.log('autocompleteCalled')
            /*the autocomplete function takes two arguments,
      the text field element and an array of possible autocompleted values:*/
            var currentFocus;
            /*execute a function when someone writes in the text field:*/
            inp.addEventListener("input", function (e) {
                var a,
                    b,
                    i,
                    val = this.value;
                /*close any already open lists of autocompleted values*/
                closeAllLists();
                if (!val) {
                    return false;
                }
                currentFocus = -1;
                /*create a DIV element that will contain the items (values):*/
                a = document.createElement("DIV");
                a.setAttribute("id", this.id + "autocomplete-list");
                a.setAttribute("class", "autocomplete-items");
                /*append the DIV element as a child of the autocomplete container:*/
                this.parentNode.appendChild(a);
                /*for each item in the array...*/
                for (i = 0; i < arr.length; i++) {
                    /*check if the item starts with the same letters as the text field value:*/
                    if (
                        arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()
                     ) {
                        if (arr[i] != otherInput.value) {
                        /*create a DIV element for each matching element:*/
                        b = document.createElement("DIV");
                        /*make the matching letters bold:*/
                        b.innerHTML =
                            "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                        b.innerHTML += arr[i].substr(val.length);
                        /*insert a input field that will hold the current array item's value:*/
                        b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                        /*execute a function when someone clicks on the item value (DIV element):*/
                        b.addEventListener("click", function (e) {
                            /*insert the value for the autocomplete text field:*/
                            inp.value = this.getElementsByTagName("input")[0].value;
                            /*close the list of autocompleted values,
                          (or any other open lists of autocompleted values:*/
                            closeAllLists();
                        });
                        a.appendChild(b);
                        }
                    }
                }
            });
            /*execute a function presses a key on the keyboard:*/
            inp.addEventListener("keydown", function (e) {
                var x = document.getElementById(this.id + "autocomplete-list");
                if (x) x = x.getElementsByTagName("div");
                if (e.keyCode == 40) {
                    /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                    currentFocus++;
                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode == 38) {
                    //up
                    /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                    currentFocus--;
                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode == 13) {
                    /*If the ENTER key is pressed, prevent the form from being submitted,*/
                    e.preventDefault();
                    if (currentFocus > -1) {
                        /*and simulate a click on the "active" item:*/
                        if (x) x[currentFocus].click();
                    }
                }
            });
            function addActive(x) {
                /*a function to classify an item as "active":*/
                if (!x) return false;
                /*start by removing the "active" class on all items:*/
                removeActive(x);
                if (currentFocus >= x.length) currentFocus = 0;
                if (currentFocus < 0) currentFocus = x.length - 1;
                /*add class "autocomplete-active":*/
                x[currentFocus].classList.add("autocomplete-active");
            }
            function removeActive(x) {
                /*a function to remove the "active" class from all autocomplete items:*/
                for (var i = 0; i < x.length; i++) {
                    x[i].classList.remove("autocomplete-active");
                }
            }
            function closeAllLists(elmnt) {
                /*close all autocomplete lists in the document,
          except the one passed as an argument:*/
                var x = document.getElementsByClassName("autocomplete-items");
                for (var i = 0; i < x.length; i++) {
                    if (elmnt != x[i] && elmnt != inp) {
                        x[i].parentNode.removeChild(x[i]);
                    }
                }
            }
            /*execute a function when someone clicks in the document:*/
            document.addEventListener("click", function (e) {
                closeAllLists(e.target);
            });

        }
        
        var DepartureCities = [
    @foreach (var name in Model.Select(t => t.DepartureCityNavigation.Name).Distinct())
    {
        @Html.Raw("'"+name+"',")
    }
    ]
        var ArrivalCities = [
    @foreach (var name in Model.Select(t => t.ArrivalCityNavigation.Name).Distinct())
    {
        @Html.Raw("'"+name+"',")
    }
        ]
        /*initiate the autocomplete function on the "myInput" element, and pass along the countries array as possible autocomplete values:*/
        autocomplete(document.getElementById("myInput"), DepartureCities, document.getElementById("myInput2"));

        autocomplete(document.getElementById("myInput2"), ArrivalCities, document.getElementById("myInput"));
    });

</script>
